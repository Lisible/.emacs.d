* General settings
** Basics
 Set default encoding
 #+begin_src emacs-lisp
   (prefer-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-language-environment 'utf-8)
   (set-selection-coding-system 'utf-8)
 #+end_src

 Disabling menu/tool/scroll bars
 #+begin_src emacs-lisp
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)
 #+end_src

 Disabling startup message
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)
 #+end_src

 Set initial buffer to dashboard
 #+begin_src emacs-lisp
   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
 #+end_src

 Show line numbers
 #+begin_src emacs-lisp
   (global-display-line-numbers-mode)
 #+end_src

 Show columns
 #+begin_src emacs-lisp
   (column-number-mode 1)
 #+end_src

 Subword
 #+begin_src emacs-lisp
   (global-subword-mode 1)
 #+end_src

 Electric
 #+begin_src emacs-lisp
   (setq electric-pair-pairs '(
			       (?\( . ?\))
			       (?\[ . ?\])
			       ))
   (electric-pair-mode t)
 #+end_src

 Config editing
 #+begin_src emacs-lisp
   (defun config-visit ()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
   (global-set-key (kbd "C-c e") 'config-visit)
 #+end_src

 Config reloading
 #+begin_src emacs-lisp
   (defun config-reload ()
     (interactive)
     (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
   (global-set-key (kbd "C-c r") 'config-reload)
 #+end_src

 Move backup files in a specific folder
 #+begin_src emacs-lisp
   (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
 #+end_src

 Disabling emacs auto-saves
 #+begin_src emacs-lisp
   (setq auto-save-default nil)
 #+end_src

 Add emoji support
 #+begin_src emacs-lisp
   (use-package emojify
     :ensure t
     :hook (after-init . global-emojify-mode))
 #+End_src
** Modeline
  Installing doom-modeline
  #+begin_src emacs-lisp
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1))
  #+end_src
** Terminal
*** Install vterm
 #+begin_src emacs-lisp
   (if (string-equal system-type "gnu/linux")
     (use-package vterm :ensure t)
     ())
 #+end_src

** Projects

To manage project files we need a nice file tree
#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :bind (([f8] . neotree-toggle)))
#+end_src

To make the file tree prettier, we need nice icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

Add doom themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+end_src

Let's also add projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

Let's also add syntax checking
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

And add inline messages for flycheck
#+begin_src emacs-lisp
  (use-package flycheck-inline
    :ensure t
    :after flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))
#+end_src

** Snippets
Let's install yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (yas-global-mode 1)
#+end_src

Now we can add snippets !
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
#+end_src
** Git
Let's install magit for git support
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
** Org
** basic config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
** Org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** LSP
Installing LSP mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :init (setq lsp-keymap-prefix "C-c l")
    :hook (
	   (rust-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration)))
#+end_src

Installing lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t)
#+end_src
** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

** switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("q" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
** Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))

  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src
** Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src

** Autocompletion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))

  (use-package ivy-posframe
    :ensure t
    :after ivy
    :init
    (ivy-posframe-mode 1)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))))

  (use-package counsel
    :ensure t
    :after ivy
    :config
    (counsel-mode t)
    (setq ivy-initial-inputs-alist nil))

  (use-package counsel-projectile
    :ensure t
    :after counsel
    :config
    (counsel-projectile-mode t))

  (use-package swiper
    :ensure t
    :after ivy
    :bind
    ("C-s" . 'swiper-isearch))
#+end_src
** Dashboard
** Others
*** y-or-n-p
Uses y-or-n-p instead of 'yes-or-no-p
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Scroll conservatively
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

*** Ring bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src 

*** Line highlighting
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode t))
#+end_src

*** Symbols prettifying
#+begin_src emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+end_src

*** Backups, autosaves
#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+end_src

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-banner-logo-title "EL PSY KONGROO")
    (setq dashboard-startup-banner "~/.emacs.d/kurisu.png")
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents . 5)
			    (bookmarks . 5)
			    (projects . 5)
			    (agenda . 5)))
    (dashboard-setup-startup-hook))
#+end_src

* Languages
** Rust
Let's install rust-mode !
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
#+end_src

Add some formatting setup
#+begin_src emacs-lisp
  (add-hook 'rust-mode-hook
	    (lambda () (setq indent-tabs-mode nil)))
  (setq rust-format-on-save t)
#+end_src

Add flycheck support
#+begin_src emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :after rust-mode
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

Add cargo support
#+begin_src emacs-lisp
  (use-package cargo
    :ensure t
    :after rust-mode
    :config
    (add-hook 'rust-mode-hook 'cargo-minor-mode))
#+end_src

** Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+end_src
** Common Lisp
#+begin_src emacs-lisp
  (use-package slime
    :ensure t)
  (setq inferior-lisp-program "sbcl")
  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src
** Markdown

Add autofill mode by default
#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook 'auto-fill-mode)
#+end_src

#+RESULTS:
| auto-fill-mode |
* Utilities
** Ledger

Install ledger
#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t)
#+end_src

Use ledger-mode automatically for .ledger files
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ledger\\'" . ledger-mode))
#+end_src
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+end_src
** Elcord
#+begin_src emacs-lisp
  (use-package elcord
    :ensure t
    :init
    (elcord-mode))
#+end_src
